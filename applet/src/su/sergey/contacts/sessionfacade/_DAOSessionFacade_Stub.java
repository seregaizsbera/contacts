// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package su.sergey.contacts.sessionfacade;

import java.io.File;
import java.io.Serializable;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ServantObject;
import su.sergey.contacts.call.valueobjects.CallExpenseAttributes;
import su.sergey.contacts.directory.valueobjects.DirectoryMetadata;
import su.sergey.contacts.directory.valueobjects.DirectoryRecord;
import su.sergey.contacts.directory.valueobjects.handles.DirectoryMetadataHandle;
import su.sergey.contacts.directory.valueobjects.handles.DirectoryRecordHandle;
import su.sergey.contacts.dto.CallExpenseHandle;
import su.sergey.contacts.dto.EmailHandle;
import su.sergey.contacts.dto.PersonHandle;
import su.sergey.contacts.dto.PhoneHandle;
import su.sergey.contacts.dto.SupplyHandle;
import su.sergey.contacts.email.valueobjects.Email2;
import su.sergey.contacts.email.valueobjects.EmailAttributes;
import su.sergey.contacts.exceptions.ContactsException;
import su.sergey.contacts.exceptions.DuplicateInstanceException;
import su.sergey.contacts.exceptions.MultipleFieldsValidationException;
import su.sergey.contacts.person.searchparameters.PersonSearchParameters;
import su.sergey.contacts.person.valueobjects.Person2;
import su.sergey.contacts.person.valueobjects.PersonAttributes;
import su.sergey.contacts.phone.valueobjects.Phone2;
import su.sergey.contacts.phone.valueobjects.PhoneAttributes;
import su.sergey.contacts.properties.InvalidPropertyValueException;
import su.sergey.contacts.properties.PropertyNotFoundException;
import su.sergey.contacts.query.valueobjects.QueryResult;
import su.sergey.contacts.report.ReportException;
import su.sergey.contacts.supply.searchparameters.SupplySearchParameters;
import su.sergey.contacts.supply.valueobjects.Supply2;
import su.sergey.contacts.supply.valueobjects.SupplyAttributes;

public class _DAOSessionFacade_Stub extends Stub implements DAOSessionFacade {
    
    private static final String[] _type_ids = {
        "RMI:su.sergey.contacts.sessionfacade.DAOSessionFacade:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000"
    };
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public EJBHome getEJBHome() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_EJBHome", true);
                    in = _invoke(out);
                    return (EJBHome) in.read_Object(EJBHome.class);
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getEJBHome();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_EJBHome",DAOSessionFacade.class);
            if (so == null) {
                return getEJBHome();
            }
            try {
                EJBHome result = ((DAOSessionFacade)so.servant).getEJBHome();
                return (EJBHome)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Handle getHandle() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_handle", true);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Handle) in.read_abstract_interface(Handle.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getHandle();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_handle",DAOSessionFacade.class);
            if (so == null) {
                return getHandle();
            }
            try {
                Handle result = ((DAOSessionFacade)so.servant).getHandle();
                return (Handle)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object getPrimaryKey() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_primaryKey", true);
                    in = _invoke(out);
                    return Util.readAny(in);
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getPrimaryKey();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_primaryKey",DAOSessionFacade.class);
            if (so == null) {
                return getPrimaryKey();
            }
            try {
                Object result = ((DAOSessionFacade)so.servant).getPrimaryKey();
                return (Object)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean isIdentical(EJBObject arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("isIdentical", true);
                    Util.writeRemoteObject(out,arg0);
                    in = _invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return isIdentical(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("isIdentical",DAOSessionFacade.class);
            if (so == null) {
                return isIdentical(arg0);
            }
            try {
                EJBObject arg0Copy = (EJBObject) Util.copyObject(arg0,_orb());
                return ((DAOSessionFacade)so.servant).isIdentical(arg0Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void remove() throws RemoteException, RemoveException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("remove", true);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:javax/ejb/RemoveEx:1.0")) {
                        throw (RemoveException) in.read_value(RemoveException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    remove();
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("remove",DAOSessionFacade.class);
            if (so == null) {
                remove();
                return;
            }
            try {
                ((DAOSessionFacade)so.servant).remove();
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof RemoveException) {
                    throw (RemoveException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public DirectoryMetadata findDirectoryMetadata(DirectoryMetadataHandle arg0) throws RemoteException, ContactsException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findDirectoryMetadata", true);
                    out.write_value(arg0,DirectoryMetadataHandle.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (DirectoryMetadata) in.read_value(DirectoryMetadata.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/exceptions/ContactsEx:1.0")) {
                        throw (ContactsException) in.read_value(ContactsException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findDirectoryMetadata(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findDirectoryMetadata",DAOSessionFacade.class);
            if (so == null) {
                return findDirectoryMetadata(arg0);
            }
            try {
                DirectoryMetadataHandle arg0Copy = (DirectoryMetadataHandle) Util.copyObject(arg0,_orb());
                DirectoryMetadata result = ((DAOSessionFacade)so.servant).findDirectoryMetadata(arg0Copy);
                return (DirectoryMetadata)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ContactsException) {
                    throw (ContactsException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public DirectoryRecord findDirectoryRecord(DirectoryRecordHandle arg0) throws RemoteException, ContactsException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findDirectoryRecord", true);
                    out.write_value(arg0,DirectoryRecordHandle.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (DirectoryRecord) in.read_value(DirectoryRecord.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/exceptions/ContactsEx:1.0")) {
                        throw (ContactsException) in.read_value(ContactsException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findDirectoryRecord(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findDirectoryRecord",DAOSessionFacade.class);
            if (so == null) {
                return findDirectoryRecord(arg0);
            }
            try {
                DirectoryRecordHandle arg0Copy = (DirectoryRecordHandle) Util.copyObject(arg0,_orb());
                DirectoryRecord result = ((DAOSessionFacade)so.servant).findDirectoryRecord(arg0Copy);
                return (DirectoryRecord)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ContactsException) {
                    throw (ContactsException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void addDirectoryRecord(DirectoryMetadataHandle arg0, DirectoryRecord arg1) throws RemoteException, ContactsException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addDirectoryRecord", true);
                    out.write_value(arg0,DirectoryMetadataHandle.class);
                    out.write_value((Serializable)arg1,DirectoryRecord.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/exceptions/ContactsEx:1.0")) {
                        throw (ContactsException) in.read_value(ContactsException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    addDirectoryRecord(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addDirectoryRecord",DAOSessionFacade.class);
            if (so == null) {
                addDirectoryRecord(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                DirectoryMetadataHandle arg0Copy = (DirectoryMetadataHandle) copies[0];
                DirectoryRecord arg1Copy = (DirectoryRecord) copies[1];
                ((DAOSessionFacade)so.servant).addDirectoryRecord(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ContactsException) {
                    throw (ContactsException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeDirectoryRecord(DirectoryRecordHandle arg0) throws RemoteException, ContactsException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeDirectoryRecord", true);
                    out.write_value(arg0,DirectoryRecordHandle.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/exceptions/ContactsEx:1.0")) {
                        throw (ContactsException) in.read_value(ContactsException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removeDirectoryRecord(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeDirectoryRecord",DAOSessionFacade.class);
            if (so == null) {
                removeDirectoryRecord(arg0);
                return;
            }
            try {
                DirectoryRecordHandle arg0Copy = (DirectoryRecordHandle) Util.copyObject(arg0,_orb());
                ((DAOSessionFacade)so.servant).removeDirectoryRecord(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ContactsException) {
                    throw (ContactsException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateDirectoryRecord(DirectoryRecordHandle arg0, DirectoryRecord arg1) throws RemoteException, ContactsException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateDirectoryRecord", true);
                    out.write_value(arg0,DirectoryRecordHandle.class);
                    out.write_value((Serializable)arg1,DirectoryRecord.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/exceptions/ContactsEx:1.0")) {
                        throw (ContactsException) in.read_value(ContactsException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateDirectoryRecord(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateDirectoryRecord",DAOSessionFacade.class);
            if (so == null) {
                updateDirectoryRecord(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                DirectoryRecordHandle arg0Copy = (DirectoryRecordHandle) copies[0];
                DirectoryRecord arg1Copy = (DirectoryRecord) copies[1];
                ((DAOSessionFacade)so.servant).updateDirectoryRecord(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ContactsException) {
                    throw (ContactsException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public QueryResult performQuery(String arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("performQuery", true);
                    out.write_value(arg0,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (QueryResult) in.read_value(QueryResult.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return performQuery(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("performQuery",DAOSessionFacade.class);
            if (so == null) {
                return performQuery(arg0);
            }
            try {
                QueryResult result = ((DAOSessionFacade)so.servant).performQuery(arg0);
                return (QueryResult)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public String[] getLastQueries() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_lastQueries", true);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (String[]) in.read_value(String[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getLastQueries();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_lastQueries",DAOSessionFacade.class);
            if (so == null) {
                return getLastQueries();
            }
            try {
                String[] result = ((DAOSessionFacade)so.servant).getLastQueries();
                return (String[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Person2 findPerson(PersonHandle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findPerson", true);
                    out.write_value(arg0,PersonHandle.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Person2) in.read_value(Person2.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findPerson(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findPerson",DAOSessionFacade.class);
            if (so == null) {
                return findPerson(arg0);
            }
            try {
                PersonHandle arg0Copy = (PersonHandle) Util.copyObject(arg0,_orb());
                Person2 result = ((DAOSessionFacade)so.servant).findPerson(arg0Copy);
                return (Person2)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public PersonHandle createPerson(PersonAttributes arg0) throws RemoteException, MultipleFieldsValidationException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createPerson", true);
                    out.write_value((Serializable)arg0,PersonAttributes.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (PersonHandle) in.read_value(PersonHandle.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/exceptions/MultipleFieldsValidationEx:1.0")) {
                        throw (MultipleFieldsValidationException) in.read_value(MultipleFieldsValidationException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return createPerson(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createPerson",DAOSessionFacade.class);
            if (so == null) {
                return createPerson(arg0);
            }
            try {
                PersonAttributes arg0Copy = (PersonAttributes) Util.copyObject(arg0,_orb());
                PersonHandle result = ((DAOSessionFacade)so.servant).createPerson(arg0Copy);
                return (PersonHandle)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MultipleFieldsValidationException) {
                    throw (MultipleFieldsValidationException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updatePerson(PersonHandle arg0, PersonAttributes arg1) throws RemoteException, MultipleFieldsValidationException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updatePerson", true);
                    out.write_value(arg0,PersonHandle.class);
                    out.write_value((Serializable)arg1,PersonAttributes.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/exceptions/MultipleFieldsValidationEx:1.0")) {
                        throw (MultipleFieldsValidationException) in.read_value(MultipleFieldsValidationException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updatePerson(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updatePerson",DAOSessionFacade.class);
            if (so == null) {
                updatePerson(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                PersonHandle arg0Copy = (PersonHandle) copies[0];
                PersonAttributes arg1Copy = (PersonAttributes) copies[1];
                ((DAOSessionFacade)so.servant).updatePerson(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MultipleFieldsValidationException) {
                    throw (MultipleFieldsValidationException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removePerson(PersonHandle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removePerson", true);
                    out.write_value(arg0,PersonHandle.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removePerson(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removePerson",DAOSessionFacade.class);
            if (so == null) {
                removePerson(arg0);
                return;
            }
            try {
                PersonHandle arg0Copy = (PersonHandle) Util.copyObject(arg0,_orb());
                ((DAOSessionFacade)so.servant).removePerson(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Phone2[] getPersonPhones(PersonHandle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("getPersonPhones", true);
                    out.write_value(arg0,PersonHandle.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Phone2[]) in.read_value(Phone2[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getPersonPhones(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getPersonPhones",DAOSessionFacade.class);
            if (so == null) {
                return getPersonPhones(arg0);
            }
            try {
                PersonHandle arg0Copy = (PersonHandle) Util.copyObject(arg0,_orb());
                Phone2[] result = ((DAOSessionFacade)so.servant).getPersonPhones(arg0Copy);
                return (Phone2[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public PhoneHandle addPersonPhone(PersonHandle arg0, PhoneAttributes arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addPersonPhone", true);
                    out.write_value(arg0,PersonHandle.class);
                    out.write_value((Serializable)arg1,PhoneAttributes.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (PhoneHandle) in.read_value(PhoneHandle.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return addPersonPhone(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addPersonPhone",DAOSessionFacade.class);
            if (so == null) {
                return addPersonPhone(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                PersonHandle arg0Copy = (PersonHandle) copies[0];
                PhoneAttributes arg1Copy = (PhoneAttributes) copies[1];
                PhoneHandle result = ((DAOSessionFacade)so.servant).addPersonPhone(arg0Copy, arg1Copy);
                return (PhoneHandle)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void setBasicPersonPhone(PersonHandle arg0, PhoneHandle arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("setBasicPersonPhone", true);
                    out.write_value(arg0,PersonHandle.class);
                    out.write_value(arg1,PhoneHandle.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    setBasicPersonPhone(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("setBasicPersonPhone",DAOSessionFacade.class);
            if (so == null) {
                setBasicPersonPhone(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                PersonHandle arg0Copy = (PersonHandle) copies[0];
                PhoneHandle arg1Copy = (PhoneHandle) copies[1];
                ((DAOSessionFacade)so.servant).setBasicPersonPhone(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removePersonPhone(PersonHandle arg0, PhoneHandle arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removePersonPhone", true);
                    out.write_value(arg0,PersonHandle.class);
                    out.write_value(arg1,PhoneHandle.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removePersonPhone(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removePersonPhone",DAOSessionFacade.class);
            if (so == null) {
                removePersonPhone(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                PersonHandle arg0Copy = (PersonHandle) copies[0];
                PhoneHandle arg1Copy = (PhoneHandle) copies[1];
                ((DAOSessionFacade)so.servant).removePersonPhone(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updatePhone(PhoneHandle arg0, PhoneAttributes arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updatePhone", true);
                    out.write_value(arg0,PhoneHandle.class);
                    out.write_value((Serializable)arg1,PhoneAttributes.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updatePhone(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updatePhone",DAOSessionFacade.class);
            if (so == null) {
                updatePhone(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                PhoneHandle arg0Copy = (PhoneHandle) copies[0];
                PhoneAttributes arg1Copy = (PhoneAttributes) copies[1];
                ((DAOSessionFacade)so.servant).updatePhone(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Email2[] getPersonEmails(PersonHandle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("getPersonEmails", true);
                    out.write_value(arg0,PersonHandle.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Email2[]) in.read_value(Email2[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getPersonEmails(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getPersonEmails",DAOSessionFacade.class);
            if (so == null) {
                return getPersonEmails(arg0);
            }
            try {
                PersonHandle arg0Copy = (PersonHandle) Util.copyObject(arg0,_orb());
                Email2[] result = ((DAOSessionFacade)so.servant).getPersonEmails(arg0Copy);
                return (Email2[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public EmailHandle addPersonEmail(PersonHandle arg0, EmailAttributes arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addPersonEmail", true);
                    out.write_value(arg0,PersonHandle.class);
                    out.write_value((Serializable)arg1,EmailAttributes.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (EmailHandle) in.read_value(EmailHandle.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return addPersonEmail(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addPersonEmail",DAOSessionFacade.class);
            if (so == null) {
                return addPersonEmail(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                PersonHandle arg0Copy = (PersonHandle) copies[0];
                EmailAttributes arg1Copy = (EmailAttributes) copies[1];
                EmailHandle result = ((DAOSessionFacade)so.servant).addPersonEmail(arg0Copy, arg1Copy);
                return (EmailHandle)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void setBasicPersonEmail(PersonHandle arg0, EmailHandle arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("setBasicPersonEmail", true);
                    out.write_value(arg0,PersonHandle.class);
                    out.write_value(arg1,EmailHandle.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    setBasicPersonEmail(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("setBasicPersonEmail",DAOSessionFacade.class);
            if (so == null) {
                setBasicPersonEmail(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                PersonHandle arg0Copy = (PersonHandle) copies[0];
                EmailHandle arg1Copy = (EmailHandle) copies[1];
                ((DAOSessionFacade)so.servant).setBasicPersonEmail(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removePersonEmail(PersonHandle arg0, EmailHandle arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removePersonEmail", true);
                    out.write_value(arg0,PersonHandle.class);
                    out.write_value(arg1,EmailHandle.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removePersonEmail(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removePersonEmail",DAOSessionFacade.class);
            if (so == null) {
                removePersonEmail(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                PersonHandle arg0Copy = (PersonHandle) copies[0];
                EmailHandle arg1Copy = (EmailHandle) copies[1];
                ((DAOSessionFacade)so.servant).removePersonEmail(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateEmail(EmailHandle arg0, EmailAttributes arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateEmail", true);
                    out.write_value(arg0,EmailHandle.class);
                    out.write_value((Serializable)arg1,EmailAttributes.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateEmail(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateEmail",DAOSessionFacade.class);
            if (so == null) {
                updateEmail(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                EmailHandle arg0Copy = (EmailHandle) copies[0];
                EmailAttributes arg1Copy = (EmailAttributes) copies[1];
                ((DAOSessionFacade)so.servant).updateEmail(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Serializable getSystemPropertyValue(String arg0) throws RemoteException, PropertyNotFoundException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("getSystemPropertyValue", true);
                    out.write_value(arg0,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Serializable) Util.readAny(in);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/properties/PropertyNotFoundEx:1.0")) {
                        throw (PropertyNotFoundException) in.read_value(PropertyNotFoundException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getSystemPropertyValue(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getSystemPropertyValue",DAOSessionFacade.class);
            if (so == null) {
                return getSystemPropertyValue(arg0);
            }
            try {
                Serializable result = ((DAOSessionFacade)so.servant).getSystemPropertyValue(arg0);
                return (Serializable)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof PropertyNotFoundException) {
                    throw (PropertyNotFoundException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void setSystemPropertyValue(String arg0, Serializable arg1) throws RemoteException, PropertyNotFoundException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("setSystemPropertyValue__CORBA_WStringValue__java_io_Serializable", true);
                    out.write_value(arg0,String.class);
                    Util.writeAny(out,arg1);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/properties/PropertyNotFoundEx:1.0")) {
                        throw (PropertyNotFoundException) in.read_value(PropertyNotFoundException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    setSystemPropertyValue(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("setSystemPropertyValue__CORBA_WStringValue__java_io_Serializable",DAOSessionFacade.class);
            if (so == null) {
                setSystemPropertyValue(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                String arg0Copy = (String) copies[0];
                Serializable arg1Copy = (Serializable) copies[1];
                ((DAOSessionFacade)so.servant).setSystemPropertyValue(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof PropertyNotFoundException) {
                    throw (PropertyNotFoundException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void setSystemPropertyValue(String arg0, String arg1) throws RemoteException, InvalidPropertyValueException, PropertyNotFoundException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("setSystemPropertyValue__CORBA_WStringValue__CORBA_WStringValue", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,String.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/properties/InvalidPropertyValueEx:1.0")) {
                        throw (InvalidPropertyValueException) in.read_value(InvalidPropertyValueException.class);
                    }
                    if (id.equals("IDL:su/sergey/contacts/properties/PropertyNotFoundEx:1.0")) {
                        throw (PropertyNotFoundException) in.read_value(PropertyNotFoundException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    setSystemPropertyValue(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("setSystemPropertyValue__CORBA_WStringValue__CORBA_WStringValue",DAOSessionFacade.class);
            if (so == null) {
                setSystemPropertyValue(arg0, arg1);
                return;
            }
            try {
                ((DAOSessionFacade)so.servant).setSystemPropertyValue(arg0, arg1);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof InvalidPropertyValueException) {
                    throw (InvalidPropertyValueException)exCopy;
                }
                if (exCopy instanceof PropertyNotFoundException) {
                    throw (PropertyNotFoundException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Supply2 findSupply(SupplyHandle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findSupply", true);
                    out.write_value(arg0,SupplyHandle.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Supply2) in.read_value(Supply2.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findSupply(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findSupply",DAOSessionFacade.class);
            if (so == null) {
                return findSupply(arg0);
            }
            try {
                SupplyHandle arg0Copy = (SupplyHandle) Util.copyObject(arg0,_orb());
                Supply2 result = ((DAOSessionFacade)so.servant).findSupply(arg0Copy);
                return (Supply2)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public SupplyHandle createSupply(SupplyAttributes arg0) throws RemoteException, MultipleFieldsValidationException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createSupply", true);
                    out.write_value((Serializable)arg0,SupplyAttributes.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (SupplyHandle) in.read_value(SupplyHandle.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/exceptions/MultipleFieldsValidationEx:1.0")) {
                        throw (MultipleFieldsValidationException) in.read_value(MultipleFieldsValidationException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return createSupply(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createSupply",DAOSessionFacade.class);
            if (so == null) {
                return createSupply(arg0);
            }
            try {
                SupplyAttributes arg0Copy = (SupplyAttributes) Util.copyObject(arg0,_orb());
                SupplyHandle result = ((DAOSessionFacade)so.servant).createSupply(arg0Copy);
                return (SupplyHandle)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MultipleFieldsValidationException) {
                    throw (MultipleFieldsValidationException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateSupply(SupplyHandle arg0, SupplyAttributes arg1) throws RemoteException, MultipleFieldsValidationException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateSupply", true);
                    out.write_value(arg0,SupplyHandle.class);
                    out.write_value((Serializable)arg1,SupplyAttributes.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/exceptions/MultipleFieldsValidationEx:1.0")) {
                        throw (MultipleFieldsValidationException) in.read_value(MultipleFieldsValidationException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateSupply(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateSupply",DAOSessionFacade.class);
            if (so == null) {
                updateSupply(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                SupplyHandle arg0Copy = (SupplyHandle) copies[0];
                SupplyAttributes arg1Copy = (SupplyAttributes) copies[1];
                ((DAOSessionFacade)so.servant).updateSupply(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MultipleFieldsValidationException) {
                    throw (MultipleFieldsValidationException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeSupply(SupplyHandle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeSupply", true);
                    out.write_value(arg0,SupplyHandle.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removeSupply(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeSupply",DAOSessionFacade.class);
            if (so == null) {
                removeSupply(arg0);
                return;
            }
            try {
                SupplyHandle arg0Copy = (SupplyHandle) Util.copyObject(arg0,_orb());
                ((DAOSessionFacade)so.servant).removeSupply(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Phone2[] getSupplyPhones(SupplyHandle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("getSupplyPhones", true);
                    out.write_value(arg0,SupplyHandle.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Phone2[]) in.read_value(Phone2[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getSupplyPhones(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getSupplyPhones",DAOSessionFacade.class);
            if (so == null) {
                return getSupplyPhones(arg0);
            }
            try {
                SupplyHandle arg0Copy = (SupplyHandle) Util.copyObject(arg0,_orb());
                Phone2[] result = ((DAOSessionFacade)so.servant).getSupplyPhones(arg0Copy);
                return (Phone2[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public PhoneHandle addSupplyPhone(SupplyHandle arg0, PhoneAttributes arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addSupplyPhone", true);
                    out.write_value(arg0,SupplyHandle.class);
                    out.write_value((Serializable)arg1,PhoneAttributes.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (PhoneHandle) in.read_value(PhoneHandle.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return addSupplyPhone(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addSupplyPhone",DAOSessionFacade.class);
            if (so == null) {
                return addSupplyPhone(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                SupplyHandle arg0Copy = (SupplyHandle) copies[0];
                PhoneAttributes arg1Copy = (PhoneAttributes) copies[1];
                PhoneHandle result = ((DAOSessionFacade)so.servant).addSupplyPhone(arg0Copy, arg1Copy);
                return (PhoneHandle)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeSupplyPhone(SupplyHandle arg0, PhoneHandle arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeSupplyPhone", true);
                    out.write_value(arg0,SupplyHandle.class);
                    out.write_value(arg1,PhoneHandle.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removeSupplyPhone(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeSupplyPhone",DAOSessionFacade.class);
            if (so == null) {
                removeSupplyPhone(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                SupplyHandle arg0Copy = (SupplyHandle) copies[0];
                PhoneHandle arg1Copy = (PhoneHandle) copies[1];
                ((DAOSessionFacade)so.servant).removeSupplyPhone(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Email2[] getSupplyEmails(SupplyHandle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("getSupplyEmails", true);
                    out.write_value(arg0,SupplyHandle.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Email2[]) in.read_value(Email2[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getSupplyEmails(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getSupplyEmails",DAOSessionFacade.class);
            if (so == null) {
                return getSupplyEmails(arg0);
            }
            try {
                SupplyHandle arg0Copy = (SupplyHandle) Util.copyObject(arg0,_orb());
                Email2[] result = ((DAOSessionFacade)so.servant).getSupplyEmails(arg0Copy);
                return (Email2[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public EmailHandle addSupplyEmail(SupplyHandle arg0, EmailAttributes arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addSupplyEmail", true);
                    out.write_value(arg0,SupplyHandle.class);
                    out.write_value((Serializable)arg1,EmailAttributes.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (EmailHandle) in.read_value(EmailHandle.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return addSupplyEmail(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addSupplyEmail",DAOSessionFacade.class);
            if (so == null) {
                return addSupplyEmail(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                SupplyHandle arg0Copy = (SupplyHandle) copies[0];
                EmailAttributes arg1Copy = (EmailAttributes) copies[1];
                EmailHandle result = ((DAOSessionFacade)so.servant).addSupplyEmail(arg0Copy, arg1Copy);
                return (EmailHandle)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeSupplyEmail(SupplyHandle arg0, EmailHandle arg1) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeSupplyEmail", true);
                    out.write_value(arg0,SupplyHandle.class);
                    out.write_value(arg1,EmailHandle.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removeSupplyEmail(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeSupplyEmail",DAOSessionFacade.class);
            if (so == null) {
                removeSupplyEmail(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                SupplyHandle arg0Copy = (SupplyHandle) copies[0];
                EmailHandle arg1Copy = (EmailHandle) copies[1];
                ((DAOSessionFacade)so.servant).removeSupplyEmail(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public File buildPersonReport(PersonSearchParameters arg0, String arg1) throws RemoteException, ReportException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("buildPersonReport", true);
                    out.write_value(arg0,PersonSearchParameters.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (File) in.read_value(File.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/report/ReportEx:1.0")) {
                        throw (ReportException) in.read_value(ReportException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return buildPersonReport(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("buildPersonReport",DAOSessionFacade.class);
            if (so == null) {
                return buildPersonReport(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                PersonSearchParameters arg0Copy = (PersonSearchParameters) copies[0];
                String arg1Copy = (String) copies[1];
                File result = ((DAOSessionFacade)so.servant).buildPersonReport(arg0Copy, arg1Copy);
                return (File)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ReportException) {
                    throw (ReportException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public File buildSupplyReport(SupplySearchParameters arg0, String arg1) throws RemoteException, ReportException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("buildSupplyReport", true);
                    out.write_value(arg0,SupplySearchParameters.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (File) in.read_value(File.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/report/ReportEx:1.0")) {
                        throw (ReportException) in.read_value(ReportException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return buildSupplyReport(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("buildSupplyReport",DAOSessionFacade.class);
            if (so == null) {
                return buildSupplyReport(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                SupplySearchParameters arg0Copy = (SupplySearchParameters) copies[0];
                String arg1Copy = (String) copies[1];
                File result = ((DAOSessionFacade)so.servant).buildSupplyReport(arg0Copy, arg1Copy);
                return (File)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ReportException) {
                    throw (ReportException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public CallExpenseAttributes findCallExpense(CallExpenseHandle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findCallExpense", true);
                    out.write_value(arg0,CallExpenseHandle.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (CallExpenseAttributes) in.read_value(CallExpenseAttributes.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findCallExpense(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findCallExpense",DAOSessionFacade.class);
            if (so == null) {
                return findCallExpense(arg0);
            }
            try {
                CallExpenseHandle arg0Copy = (CallExpenseHandle) Util.copyObject(arg0,_orb());
                CallExpenseAttributes result = ((DAOSessionFacade)so.servant).findCallExpense(arg0Copy);
                return (CallExpenseAttributes)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public CallExpenseHandle createCallExpense(CallExpenseAttributes arg0) throws MultipleFieldsValidationException, DuplicateInstanceException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createCallExpense", true);
                    out.write_value(arg0,CallExpenseAttributes.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (CallExpenseHandle) in.read_value(CallExpenseHandle.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/exceptions/MultipleFieldsValidationEx:1.0")) {
                        throw (MultipleFieldsValidationException) in.read_value(MultipleFieldsValidationException.class);
                    }
                    if (id.equals("IDL:su/sergey/contacts/exceptions/DuplicateInstanceEx:1.0")) {
                        throw (DuplicateInstanceException) in.read_value(DuplicateInstanceException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return createCallExpense(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createCallExpense",DAOSessionFacade.class);
            if (so == null) {
                return createCallExpense(arg0);
            }
            try {
                CallExpenseAttributes arg0Copy = (CallExpenseAttributes) Util.copyObject(arg0,_orb());
                CallExpenseHandle result = ((DAOSessionFacade)so.servant).createCallExpense(arg0Copy);
                return (CallExpenseHandle)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MultipleFieldsValidationException) {
                    throw (MultipleFieldsValidationException)exCopy;
                }
                if (exCopy instanceof DuplicateInstanceException) {
                    throw (DuplicateInstanceException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateCallExpense(CallExpenseHandle arg0, CallExpenseAttributes arg1) throws MultipleFieldsValidationException, DuplicateInstanceException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateCallExpense", true);
                    out.write_value(arg0,CallExpenseHandle.class);
                    out.write_value(arg1,CallExpenseAttributes.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:su/sergey/contacts/exceptions/MultipleFieldsValidationEx:1.0")) {
                        throw (MultipleFieldsValidationException) in.read_value(MultipleFieldsValidationException.class);
                    }
                    if (id.equals("IDL:su/sergey/contacts/exceptions/DuplicateInstanceEx:1.0")) {
                        throw (DuplicateInstanceException) in.read_value(DuplicateInstanceException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateCallExpense(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateCallExpense",DAOSessionFacade.class);
            if (so == null) {
                updateCallExpense(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                CallExpenseHandle arg0Copy = (CallExpenseHandle) copies[0];
                CallExpenseAttributes arg1Copy = (CallExpenseAttributes) copies[1];
                ((DAOSessionFacade)so.servant).updateCallExpense(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MultipleFieldsValidationException) {
                    throw (MultipleFieldsValidationException)exCopy;
                }
                if (exCopy instanceof DuplicateInstanceException) {
                    throw (DuplicateInstanceException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeCallExpense(CallExpenseHandle arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeCallExpense", true);
                    out.write_value(arg0,CallExpenseHandle.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removeCallExpense(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeCallExpense",DAOSessionFacade.class);
            if (so == null) {
                removeCallExpense(arg0);
                return;
            }
            try {
                CallExpenseHandle arg0Copy = (CallExpenseHandle) Util.copyObject(arg0,_orb());
                ((DAOSessionFacade)so.servant).removeCallExpense(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
}
