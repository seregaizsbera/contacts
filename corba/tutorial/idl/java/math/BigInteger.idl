/**
 * java/math/BigInteger.idl
 * Generated by rmic -idl. Do not edit
 * 20 ноября 2005 г. 14:59:49 GMT+03:00
 */


#ifndef __java_math_MutableBigInteger__

module java {
module math {

    abstract valuetype MutableBigInteger;

};
};

#endif


#ifndef __java_util_Random__

module java {
module util {

    valuetype Random;

};
};

#endif


#ifndef __java_math_BigInteger__

module java {
module math {

    valuetype BigInteger;

};
};

#endif

#include "java/lang/Number.idl"
#include "java/lang/Comparable.idl"
#include "java/lang/Object.idl"
#include "org/omg/boxedRMI/seq1_octet.idl"
#include "org/omg/boxedRMI/seq1_long.idl"
#include "org/omg/boxedRMI/java/math/seq1_BigInteger.idl"
#include "orb.idl"

#ifndef __java_math_BigInteger__
#define __java_math_BigInteger__


module java {
module math {

    custom valuetype BigInteger: ::java::lang::Number, ::java::lang::Comparable {
    
        private long bitCount_;
        private long bitLength_;
        private long firstNonzeroByteNum;
        private long lowestSetBit;
        private long signum_;
        private ::org::omg::boxedRMI::seq1_octet magnitude;
        factory create__org_omg_boxedRMI_seq1_octet(
            in ::org::omg::boxedRMI::seq1_octet arg0 );
        factory create__long__org_omg_boxedRMI_seq1_octet(
            in long arg0,
            in ::org::omg::boxedRMI::seq1_octet arg1 );
        factory create__CORBA_WStringValue__long(
            in ::CORBA::WStringValue arg0,
            in long arg1 );
        factory create__CORBA_WStringValue(
            in ::CORBA::WStringValue arg0 );
        factory create__long__java_util_Random(
            in long arg0,
            in ::java::util::Random arg1 );
        factory create__long__long__java_util_Random(
            in long arg0,
            in long arg1,
            in ::java::util::Random arg2 );
        factory create__java_math_MutableBigInteger__long(
            in ::java::math::MutableBigInteger arg0,
            in long arg1 );
        ::java::math::BigInteger valueOf(
            in long long arg0 );
        ::java::math::BigInteger add(
            in ::java::math::BigInteger arg0 );
        ::java::math::BigInteger subtract(
            in ::java::math::BigInteger arg0 );
        ::java::math::BigInteger multiply(
            in ::java::math::BigInteger arg0 );
        ::java::math::BigInteger divide(
            in ::java::math::BigInteger arg0 );
        ::org::omg::boxedRMI::java::math::seq1_BigInteger divideAndRemainder(
            in ::java::math::BigInteger arg0 );
        ::java::math::BigInteger remainder(
            in ::java::math::BigInteger arg0 );
        ::java::math::BigInteger pow(
            in long arg0 );
        ::java::math::BigInteger gcd(
            in ::java::math::BigInteger arg0 );
        void primitiveRightShift(
            in ::org::omg::boxedRMI::seq1_long arg0,
            in long arg1,
            in long arg2 );
        void primitiveLeftShift(
            in ::org::omg::boxedRMI::seq1_long arg0,
            in long arg1,
            in long arg2 );
        ::java::math::BigInteger abs( );
        ::java::math::BigInteger negate( );
        long signum( );
        ::java::math::BigInteger mod(
            in ::java::math::BigInteger arg0 );
        ::java::math::BigInteger modPow(
            in ::java::math::BigInteger arg0,
            in ::java::math::BigInteger arg1 );
        long mulAdd(
            in ::org::omg::boxedRMI::seq1_long arg0,
            in ::org::omg::boxedRMI::seq1_long arg1,
            in long arg2,
            in long arg3,
            in long arg4 );
        long addOne(
            in ::org::omg::boxedRMI::seq1_long arg0,
            in long arg1,
            in long arg2,
            in long arg3 );
        ::java::math::BigInteger modInverse(
            in ::java::math::BigInteger arg0 );
        ::java::math::BigInteger shiftLeft(
            in long arg0 );
        ::java::math::BigInteger shiftRight(
            in long arg0 );
        ::org::omg::boxedRMI::seq1_long javaIncrement(
            in ::org::omg::boxedRMI::seq1_long arg0 );
        ::java::math::BigInteger and(
            in ::java::math::BigInteger arg0 );
        ::java::math::BigInteger or(
            in ::java::math::BigInteger arg0 );
        ::java::math::BigInteger xor(
            in ::java::math::BigInteger arg0 );
        ::java::math::BigInteger not( );
        ::java::math::BigInteger andNot(
            in ::java::math::BigInteger arg0 );
        boolean testBit(
            in long arg0 );
        ::java::math::BigInteger setBit(
            in long arg0 );
        ::java::math::BigInteger clearBit(
            in long arg0 );
        ::java::math::BigInteger flipBit(
            in long arg0 );
        readonly attribute long lowestSetBit;
        long bitLength( );
        long bitLen(
            in long arg0 );
        long bitCount( );
        long bitCnt(
            in long arg0 );
        long trailingZeroCnt(
            in long arg0 );
        boolean isProbablePrime(
            in long arg0 );
        long compareTo__java_math_BigInteger(
            in ::java::math::BigInteger arg0 );
        boolean equals(
            in ::java::lang::_Object arg0 );
        ::java::math::BigInteger min(
            in ::java::math::BigInteger arg0 );
        ::java::math::BigInteger max(
            in ::java::math::BigInteger arg0 );
        long hashCode( );
        ::CORBA::WStringValue toString__long(
            in long arg0 );
        ::CORBA::WStringValue toString__( );
        ::org::omg::boxedRMI::seq1_octet toByteArray( );
    
    };

#pragma ID BigInteger "RMI:java.math.BigInteger:E2F79B6E7A470003:8CFC9F1FA93BFB1D"

};
};

#include "java/math/MutableBigInteger.idl"
#include "java/util/Random.idl"
#include "java/math/BigInteger.idl"
#endif

